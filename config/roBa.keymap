#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _


#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        left_parentheses: left_parentheses {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_PARENTHESES";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACKET>,
                <&kp LEFT_BRACE>;
        };

        right_parentheses: right_parentheses {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_PARENTHESES";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACKET>,
                <&kp RIGHT_BRACE>;
        };

        quote: quote {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;
        };

        colon: colon {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W    &kp E         &kp R                      &kp T                                            &kp Y        &kp U    &lt 5 I    &kp O    &kp P
&mt LEFT_SHIFT A  &kp S    &kp D         &kp F                      &kp G        &lt 6 LS(LG(S))      &kp RC(Z)      &kp H        &lt 4 J  &kp K      &kp L    &mt RSHIFT MINUS
&mt LEFT_SHIFT Z  &kp X    &kp C         &kp V                      &kp B        &kp LG(TAB)          &kp RC(Y)      &kp N        &kp M    &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp TAB  &kp LEFT_WIN  &lt_to_layer_0 1 LEFT_ALT  &lt 2 SPACE  &mt LCTRL GRAVE      &kp BACKSPACE  &lt 3 ENTER                               &kp ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp TAB         &kp F2   &kp F3   &kp F4   &kp F5                      &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp F6   &kp F7   &kp F8   &kp F9  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp F10  &kp F11  &kp F12  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &trans   &trans   &trans   &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH              &kp AMPERSAND       &kp PERCENT                             &kp ASTERISK     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS
&colon           &quote       &left_parentheses     &right_parentheses  &kp TILDE       &trans      &kp RC(N1)  &kp SLASH        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&kp LEFT_SHIFT   &kp CARET    &kp NON_US_BACKSLASH  &kp DOLLAR          &kp UNDERSCORE  &trans      &kp CARET   &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp EQUAL
&trans           &trans       &trans                &trans              &trans          &trans      &kp K_BACK  &kp ENTER                                                           &kp KP_NUMLOCK
            >;
        };

        ARROW {
            bindings = <
&kp TAB         &trans          &kp UP_ARROW    &trans           &trans                            &trans    &kp RC(PAGE_UP)  &kt UP_ARROW  &kp RC(PAGE_DOWN)  &trans
&kp LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans     &trans         &trans  &kp HOME  &kp LEFT_ARROW   &kp DOWN      &kp RIGHT          &kp END
&kp LEFT_SHIFT  &trans          &trans          &trans           &trans     &trans         &trans  &trans    &kp PLUS         &kp MINUS     &trans             &trans
&kp LCTRL       &trans          &trans          &kp LEFT_ALT     &kp SPACE  &kp LCTRL      &trans  &trans                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                  &trans         &trans    &mkp MB1  &mkp MB2  &kp RC(W)
&trans  &trans  &trans  &trans  &trans  &trans      &trans              &trans         &mkp MB1  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans              &trans         &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp RA(LEFT_ARROW)  &kp RA(RIGHT)                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                  &trans               &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans              &trans               &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans              &trans               &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)                          &trans
            >;
        };

        layer_6 {
            bindings = <
&studio_unlock  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans          &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans          &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
